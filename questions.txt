Question:

Options:

Correct answer:

Explanations:

A:

B:

C:

D:


Question 1:
Your developers want to run fully provisioned EC2 instances to support their application
code deployments but prefer not to have to worry about manually configuring and launching
the necessary infrastructure. Which of the following should they use?

Options:
A.AWS Lambda
B.AWS Elastic Beanstalk
C.Amazon EC2 Auto Scaling
D.Amazon Route 53

Correct answer:
B. 

Explanations:
A: AWS Lambda - WRONG because:
Lambda is a serverless compute service that runs code in response to events
without provisioning or managing servers.
The question specifically asks for "fully provisioned EC2 instances," but
Lambda doesn't use EC2 instances at all.
Lambda functions run for a maximum of 15 minutes and are event-driven, which
doesn't match the requirement for persistent EC2 instances to support
application deployments.

B: Elastic Beanstalk takes care of the ongoing underlying deployment details
for you, allowing you to focus exclusively on your code.
Lambda will respond to trigger events by running code a single time, Auto
Scaling will ramp up existing infrastructure in response to demand, and Route53
manages DNS and network routing.

C: Amazon EC2 Auto Scaling - WRONG because:
Auto Scaling is used to automatically adjust the number of EC2 instances based
on demand, but it doesn't handle the initial configuration and launching of the
infrastructure. You still need to manually create launch templates, configure
security groups, set up load balancers, and define scaling policies.
Auto Scaling assumes you already have the infrastructure configured - it just
scales existing setups up or down.

D: Amazon Route 53 - WRONG because:
Route 53 is AWS's DNS (Domain Name System) service that manages domain
registration, DNS routing, and health checks.
It has nothing to do with provisioning or managing EC2 instances or application
infrastructure. It only handles how users find your application through domain
name resolution, not how the application infrastructure is deployed or managed.


Question 2:
Some of your application’s end users are complaining of delays when accessing your
resources from remote geographic locations. Which of these services would be the most likely
to help reduce the delays?

Options:
A.Amazon CloudFront
B.Amazon Route 53
C.Elastic Load Balancing
D.Amazon Glacier

Correct answer:
A

Explanations:
A: CloudFront maintains a network of endpoints where cached versions of your
application data are stored to provide quicker responses to user requests.
Route 53 manages DNS and network routing, Elastic Load Balancing routes 
incoming user requests among a cluster of available servers, and Glacier
provides high-­latency, low-­cost file storage.

B: WRONG because:
While Route 53 is a DNS service that can route users to the nearest AWS region
using latency-based routing, it doesn't actually reduce the physical distance
data needs to travel or cache content closer to users.
It only helps direct users to the best endpoint, but once connected, users still
experience the same geographic delays when downloading content.
Route 53 provides routing optimization but not content delivery optimization.

C: Elastic Load Balancing - WRONG because:
ELB distributes incoming traffic across multiple servers within the same region
or availability zones to prevent any single server from being overwhelmed.
However, it doesn't address geographic latency issues.
All the load balancer targets are typically in the same AWS region, so users
from remote locations will still experience the same delays reaching that region.
ELB improves availability and performance within a region, not across geographic
distances.

D: Amazon Glacier - WRONG because:
Glacier is a long-term archival storage service designed for infrequently
accessed data with retrieval times measured in hours (not milliseconds).
It's the opposite of what you'd want for reducing user access delays.
Glacier is optimized for cost, not speed, and would actually increase delays
significantly since data retrieval can take 1-12 hours depending on the retrieval
option chosen.


Question 3:
Which of the following is the best use-case scenario for Elastic Block Store?

Options:

A: You need a cheap and reliable place to store files your application can access.
B: You need a safe place to store backup archives from your local servers.
C: You need a source for on-­demand compute cycles to meet fluctuating demand for your
application.
D: You need persistent storage for the filesystem run by your EC2 instance.

Correct answer:
D

Explanations:

A: You need a cheap and reliable place to store files your application can
access - WRONG because:

While EBS is reliable, it's not the cheapest storage option for general file
storage.
Amazon S3 is much more cost-effective for storing files that applications need
to access, especially for static content, backups, or infrequently accessed
data.
EBS is designed for high-performance, low-latency access as a block storage
device attached to EC2 instances, which comes at a premium price compared to
object storage like S3.

B: You need a safe place to store backup archives from your local servers
WRONG because:
For backup archives, Amazon S3 (especially S3 Glacier or S3 Glacier Deep Archive)
would be far more appropriate and cost-effective.
EBS is designed for active, operational storage that needs to be attached to
running EC2 instances.
Using EBS for backup archives would be unnecessarily expensive since you're
paying for high-performance block storage when you only need long-term
archival storage with infrequent access.

C: You need a source for on-demand compute cycles to meet fluctuating demand
WRONG because:
EBS provides storage, not compute power.
For on-demand compute cycles, you would use services like EC2 instances
(with Auto Scaling), AWS Lambda for serverless compute, or other compute
services.
EBS volumes attach to compute instances to provide them with persistent storage,
but they don't provide any processing power themselves.

D: -CORRECT- Elastic Block Store provides virtual block devices
(think: storage drives) on which you can install and run filesystems and data
operations.
It is not normally a cost-­effective option for long-­term data storage.
################################ ADDED ##################################
Skip question 4 - 5 options needs to upgrade the MCQ system to acommodate it...
################################ To Do ###################################

Question 5:
The data consumed by the application you’re planning will require more speed and flexibility
than you can get from a closely defined relational database structure. Which AWS database
service should you choose?

Options:
A.Relational Database Service (RDS)
B.Amazon Aurora
C.Amazon DynamoDB
D.Key Management Service (KMS)

Correct answer:
C

Explanations:

A: Relational Database Service (RDS) - WRONG because:
RDS provides managed relational databases (MySQL, PostgreSQL, Oracle,
SQL Server, MariaDB) that use rigid, predefined schemas with tables, rows, and
columns.
The question specifically states you need "more speed and flexibility than you
can get from a closely defined relational database structure," so RDS is
exactly what you're trying to avoid.
RDS requires you to define your schema upfront and makes schema changes complex
and time-consuming.

B: Amazon Aurora - WRONG because:
Aurora is AWS's cloud-native relational database that's compatible with MySQL
and PostgreSQL.
While Aurora offers better performance than traditional RDS databases, it's
still fundamentally a relational database with the same rigid schema
requirements.
It doesn't solve the flexibility problem mentioned in the question - you still
need to define tables, columns, and relationships upfront, and schema changes
are still complex.

C: DynamoDB provides a NoSQL (nonrelational) database service.
Both are good for workloads that can be more efficiently run without the
relational schema of SQL database engines (like those, including Aurora, that
are offered by RDS).
KMS is a tool for generating and managing encryption keys.

D: Key Management Service (KMS) - WRONG because:
KMS is not a database service at all - it's a security service for creating
and managing encryption keys used to encrypt data across AWS services.
KMS has nothing to do with storing, retrieving, or managing application data.
It's purely for cryptographic key management and would not address any database
performance or flexibility requirements.
